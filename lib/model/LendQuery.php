<?php



/**
 * Skeleton subclass for performing query and update operations on the 'lend' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.5.3 on:
 *
 * Tue Sep 28 15:53:16 2010
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    propel.generator.lib.model
 */
class LendQuery extends BaseLendQuery {


     /*
      * @param mktime of the day with 0 hours and 0 minutes
      * @return subrequest to do an other request
      *
      * Search if this time match with a same day and then search lends which were created this day
      */
     public function filterByDay($time)
     {
         $timeMax = $time+(3600*24);
         return $this->where('(UNIX_TIMESTAMP(Lend.CreatedAt) BETWEEN '.$time.' AND '.$timeMax.' OR UNIX_TIMESTAMP(Lend.CreatedAt) = '.$time.')');
     }

     /*
      * @param month and year
      *
      * Search a lend created this month and this year
      */
     public function filterByMonth($month,$year)
     {
         return $this->where('DATE_FORMAT(Lend.CreatedAt, \'%m\') ='.$month)
            ->filterByYear ($year);
     }

     /*
      * @param year
      *
      * Search a lend created this year
      */
     public function filterByYear($year)
     {
        return $this->where('DATE_FORMAT(Lend.CreatedAt, \'%Y\') ='.$year);
     }


      /*
      * @param mktime of the day with 0 hours and 0 minutes, id of a product
      * @return subrequest to do an other request
      *
      * Search if this time match with a same day and then search lends which were created this day for this product
      */
     public function filterByDayAndProduct($time,$idProduct)
     {
         return $this->filterByDay ($time)
                 ->useLendProductQuery()
                    ->filterByIdproduct($idProduct)
                 ->endUse();
     }

     /*
      * @param month and year and id of a product
      *
      * Search a lend created this month of this year for this product
      */
     public function filterByMonthAndProduct($month,$year,$idProduct)
     {
         return $this->filterByMonth($month,$year)
            ->useLendProductQuery()
              ->filterByIdproduct($idProduct)
            ->endUse();
     }

     /*
      * @param time and id of a category
      *
      * Search a lend created this month of this year for this product
      */
     public function filterByDayAndCateg($time,$idCateg)
     {

         return $this->filterByDay($time)
            ->useLendProductQuery()
                 ->useProductQuery ()
                     ->useProductCategQuery()
                        ->filterByIdCateg($idCateg)
                    ->endUse()
                ->endUse()
            ->endUse();
     }

     /*
      * @param month and year and id of a category
      *
      * Search a lend created this month of this year for this category
      */
     public function filterByMonthAndCateg($month,$year,$idCateg)
     {
         return $this->filterByMonth($month,$year)
            ->useLendProductQuery()
                 ->useProductQuery ()
                     ->useProductCategQuery()
                        ->filterByIdCateg($idCateg)
                    ->endUse()
                ->endUse()
            ->endUse();
     }

     /*
      * @param id of a user
      *
      * Search lends of this user which aren't finish
      * This function allows to find the bag oe the user with products he wants
      */
     public function filterByUserBorrowing ($idUser)
     {
         return $this->filterByIduser($idUser)
            ->filterByState('en cours');
     }

     /*
      * @param id of the category
      * @return number of lends for one category
      *
      * Allow to count the lends which were for this category
      */
     public static function countLendByCateg($idCateg)
     {
         return LendQuery::create()
                   ->useLendProductQuery()
                       ->useProductQuery ()
                         ->useProductCategQuery()
                           ->filterByIdCateg($idCateg)
                         ->endUse()
                       ->endUse()
                  ->endUse()
                  ->count();
     }

     /*
      * @param date object with hours
      * @return String date
      *
      * Allow to make an english date into french date with some changes (text is italic for the css)
      * This function allows to write the historic
      */
     public static function dateFR($date)
     {
         $date1 = explode(' ',$date);
         $date2 = explode('-',$date1[0]);
         return ($date2[2].'/'.$date2[1].'/'.$date2[0].' <i>( a  '.$date1[1]).')</i>';
     }

     /*
      * @param date object
      *
      * This function returns a french date without hours
      */
     public static function date($date)
     {
         if($date != "")
         {
             $dateP = explode('-',$date);
             return @($dateP[2].'/'.$dateP[1].'/'.$dateP[0]);
         }
         else
             return;
     }
    
} // LendQuery
