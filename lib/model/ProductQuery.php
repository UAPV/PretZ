<?php



/**
 * Skeleton subclass for performing query and update operations on the 'product' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.5.3 on:
 *
 * Tue Sep 28 15:53:16 2010
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    propel.generator.lib.model
 */
class ProductQuery extends BaseProductQuery {

    /*
     * @param barcode of a product
     * @return boolean
     *
     * Verify if this barcode already exists for a product 
     */
    protected static function exist($barcode)
    {
        $product = self::create()
                ->filterByBarcode($barcode)
                ->findOne();

        if (count($product) > 0)
            return true;
        else 
            return false;
    }



    /*
     * @return number
     *
     * Allow to create a new barcode thanks the last id.
     * This function does a verification to verify if this barcode exists.
     */
    public static function getLastId()
    {
        $lastProd = ProductQuery::create()
                    ->orderById('desc')
                    ->findOne();

        if(count($lastProd) > 0)
        {
            $i = 0;
            while(self::exist($lastProd->getId()+$i))
            {
                $i++;
            }
            return ($lastProd->getId())+$i;
        }
        else
            return 1;
    }

    /*
     * @param id of a product
     * @return number
     *
     * Find the barcode of the product with this id.
     */
    public static function getBarcode($id)
    {
        $prod = ProductQuery::create()
                ->filterById($id)
                ->findOne();
        
        return $prod->getBarcode();
    }

    /*
     * @param id of a category
     * @return an array of products in this category
     *
     * Return all products in this category.
     */
    public static function getProducts($idCateg)
    {
        return self::create()
                     ->useProductCategQuery()
                        ->filterByIdcateg($idCateg)
                     ->endUse()
                     ->find();
    }

    /*
     * @param id of the category
     * @return number
     *
     * Return number products which are lent in this category.
     */
    public static function getProductLendedByCateg($idCateg)
    {
        return self::create()
                    ->filterByState('1')
                    ->useProductCategQuery()
                        ->filterByIdcateg($idCateg)
                     ->endUse()
                     ->count();
    }

    /*
     * @param string
     * @return string
     *
     * Return first string into string without accents
     */
    public static function wd_remove_accents($str, $charset='utf-8')
    {
        $str = htmlentities($str, ENT_NOQUOTES, $charset);

        $str = preg_replace('#&([A-za-z])(?:acute|cedil|circ|grave|orn|ring|slash|th|tilde|uml);#', '\1', $str);
        $str = preg_replace('#&([A-za-z]{2})(?:lig);#', '\1', $str); // pour les ligatures e.g. '&oelig;'
        $str = preg_replace('#&[^;]+;#', '', $str); // supprime les autres caract√®res

        return $str;
    }
} // ProductQuery
